You are given a sorted array nums of n non-negative integers and an integer maximumBit. You want to perform the following query n times:

1. Find a non-negative integer k < 2maximumBit such that nums[0] XOR nums[1] XOR ... XOR nums[nums.length-1] XOR k is maximized. k is the answer to the ith query.
2. Remove the last element from the current array nums.
Return an array answer, where answer[i] is the answer to the ith query.



 class Solution {
    public int[] getMaximumXor(int[] nums, int maximumBit) {
        int n = nums.length;
        int[] ans = new int[n];
        int max_possible = (1 << maximumBit) - 1;
        int total_XOR = 0;

        // Calculate the cumulative XOR of the entire array
        for (int num : nums) {
            total_XOR ^= num;
        }

        // Generate the result for each query
        for (int i = 0; i < n; i++) {
            ans[i] = total_XOR ^ max_possible;
            total_XOR ^= nums[n - 1 - i];
        }

        return ans;
    }
}


Example 1:

Input: nums = [0,1,1,3], maximumBit = 2
Output: [0,3,2,3]
Explanation: The queries are answered as follows:
1st query: nums = [0,1,1,3], k = 0 since 0 XOR 1 XOR 1 XOR 3 XOR 0 = 3.
2nd query: nums = [0,1,1], k = 3 since 0 XOR 1 XOR 1 XOR 3 = 3.
3rd query: nums = [0,1], k = 2 since 0 XOR 1 XOR 2 = 3.
4th query: nums = [0], k = 3 since 0 XOR 3 = 3.
