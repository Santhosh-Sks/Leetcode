Given two n x n binary matrices mat and target, return true if it is possible to make mat equal to target by rotating mat in 90-degree increments, or false otherwise.

Example 1:


Input: mat = [[0,1],[1,0]], target = [[1,0],[0,1]]
Output: true
Explanation: We can rotate mat 90 degrees clockwise to make mat equal target.
Example 2:


Input: mat = [[0,1],[1,1]], target = [[1,0],[0,1]]
Output: false
Explanation: It is impossible to make mat equal to target by rotating mat.
Example 3:


Input: mat = [[0,0,0],[0,1,0],[1,1,1]], target = [[1,1,1],[0,1,0],[0,0,0]]
Output: true
Explanation: We can rotate mat 90 degrees clockwise two times to make mat equal target.
 

Constraints:

n == mat.length == target.length
n == mat[i].length == target[i].length
1 <= n <= 10
mat[i][j] and target[i][j] are either 0 or 1.

solution:

class Solution {
    public boolean findRotation(int[][] mat, int[][] target) {
        int row = mat.length;
        int col = mat[0].length;
        for(int i=0;i<4;i++)
        {
            if(isequal(mat,target)){
                return true;
            }
            mat = rotatemat(mat);
        }
        return false;
    }
    public static boolean isequal(int [][]mat,int[][] target)
    {
        int row = mat.length;
        int col = mat[0].length;
         for(int i =0;i<row*col;i++)
        {
            int r = i/col;
            int c =i%col;
            if(mat[r][c]!=target[r][c])
                return false;
        }
        return true;
    }
    public static int[][] rotatemat(int[][] mat)
    {
        int row = mat.length;
        int col = mat[0].length;
        int [][] rotate = new int[row][col];
        for(int i=0;i<row*col;i++)
        {
            int r = i/col;
            int c =i%col;
            rotate[c][row-1-r] = mat[r][c];
        }
        return rotate;
    }
}
