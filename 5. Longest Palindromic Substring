Given a string s, return the longest 
palindromic substring in s.

Example 1:

Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.
Example 2:

Input: s = "cbbd"
Output: "bb"
 

Constraints:

1 <= s.length <= 1000
s consist of only digits and English letters.

solution:
class Solution {
    public String longestPalindrome(String s) {
        if(s == null || s.length()<1) return "";
        int start =0,end=0,maxlen=0;
        for(int i=0;i<s.length();i++)
        {
            int len1 = fun(s,i,i);
            int len2 = fun(s,i,i+1);
            maxlen = Math.max(len1,len2);
        if(maxlen > end-start)
        {
            start = i-(maxlen-1)/2;
            end = i+maxlen/2;
        }
        }
        
        return s.substring(start,end+1);
    }
    public int fun(String s,int left,int right)
    {
        while(left>=0 && right<s.length() && s.charAt(left) == s.charAt(right))
        {
            left--;
            right++;
        }
        return right-left-1;
    }
}
