Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

 

Example 1:


Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.
Example 2:

Input: grid = [[1,2,3],[4,5,6]]
Output: 12
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 200
0 <= grid[i][j] <= 200

Solution:
class Solution {
    public static int pathsum(int n,int m,int[][]grid,int dp[][])
    {
       
        int r= grid.length;
        int c = grid[0].length;
        if(n==r-1 && m==c-1)
            return grid[n][m];
        if(n >= r || m >= c)
            return Integer.MAX_VALUE;
        if(dp[n][m]!=-1)
            return dp[n][m];
        int right = Integer.MAX_VALUE;
        int down = Integer.MAX_VALUE;
        if(m<c-1)
            right = pathsum(n,m+1,grid,dp);
        if(n<r-1)
            down = pathsum(n+1,m,grid,dp);
        return dp[n][m] = grid[n][m] + Math.min(right, down);
}
  
    public int minPathSum(int[][] grid) {
         int r= grid.length;
        int c = grid[0].length;
        int [][] dp = new int[r][c];
       for (int i = 0; i < r; i++) {
            Arrays.fill(dp[i], -1); 
        }
        return pathsum(0,0,grid,dp);
    }
}
