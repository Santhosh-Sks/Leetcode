Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 

Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')
 

Constraints:

0 <= word1.length, word2.length <= 500
word1 and word2 consist of lowercase English letters.


class Solution {
    public int minDistance(String word1, String word2) {
        int n = word1.length();
        int m = word2.length();
        char ch1,ch2;
        int[][] mat = new int[n+1][m+1];
        for(int i=0;i<=n;i++)
        {
            mat[i][0] = i;
        }
        for(int i=0;i<=m;i++)
        {
            mat[0][i]=i;
        }
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                ch1 = word1.charAt(i-1);
                ch2 = word2.charAt(j-1);
                if(ch1==ch2)
                {
                    mat[i][j] = mat[i-1][j-1];
                }
                else{
                    mat[i][j] = 1+Math.min(mat[i-1][j],Math.min(mat[i][j-1],mat[i-1][j-1]));
                }
            }
            
        }
        return mat[n][m];
    }
}
